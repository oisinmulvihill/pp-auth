"""
:mod:`plain` --- plain authenticators for repoze.who
====================================

.. module:: plain
   :synopsis: provides plain authenticator, groups and permissions
   
.. moduleauthor:: Oisin Mulvihill<oisin@foldingsoftware.com>
.. sectionauthor:: Oisin Mulvihill<oisin@foldingsoftware.com>

.. versionadded:: 1.0

"""
import os
import csv
import logging
import StringIO

from repoze.what.plugins.ini import INIGroupAdapter
from repoze.what.plugins.ini import INIPermissionsAdapter

from pp.auth import pwtools

def get_log():
    return logging.getLogger('pp.auth.plugins.plain')


def register():
    """
    Returns registration info for pp.auth
    """
    return {
        'authenticators' : get_auth_from_config,
        'mdproviders' : get_auth_from_config,
        'groups' : get_groups_from_config,
        'permissions' : get_permissions_from_config,
    }


class PlainAuthenticatorMetadataProvider(object):
    """
    This implements a combination of the repose.who IAuthenticatorPlugin
    and IMetadataProvider.

    This class loads a CSV file which contains the following fields::

        username, password, firstname, lastname, email
        bob, password, Bob, Sproket, bob@example.com
        :
        etc

    The password is encrypted and generated by the `encrypt` function that
    is provided in the `plain` module.

    The given CSV is loaded at start up time. It is used for user
    authentication and to decorate the environment with the firstname
    and lastname fields for the matching username. The extra field
    name is created as a convience for '%s %s' % (firstname, lastname)
    
    """
    FIELDNAMES = ['username', 'password', 'firstname', 'lastname', 'email']
    
    def __init__(self, user_details):
        """Load the user details recovered from a file.

        :param user_details: This is a string of lines read from
            the user data CSV file.
            
        """
        self.userDetails = {}
        
        s = StringIO.StringIO(user_details)
        reader = csv.DictReader(s, fieldnames=self.FIELDNAMES)
        for row in reader:
            # No check for duplicate usernames is done! The
            # last will over write any previous entry.
            username = row['username'].strip()
            password = row['password'].strip()
            firstname = row['firstname'].strip()
            lastname = row['lastname'].strip()
            email = row['email'].strip()
            name = "%s %s" % (firstname, lastname)
            
            self.userDetails[username] = dict(
                username=username,
                password=password,
                firstname=firstname,
                lastname=lastname,
                email=email,
                name=name,
            )

    def authenticate(self, environ, identity):
        """
        Check the given auth details and if its ok return the
        userid for the given details.

        See: (IAuthenticatorPlugin)
            http://docs.repoze.org/who/narr.html#writing-an-authenticator-plugin

        :returns: None indicated auth failure.
            
        """
        get_log().info("authenticate: %r" % identity)
        returned = None
        
        login = identity['login']
        password = identity['password']
                    
        # Recover the password and check the given one against it:
        user = self.userDetails.get(login)
        get_log().info("authenticate: found user: %r" % user)
        if user:
            #print "user '%s' hpw '%s'" % (user,user['password'])
            if pwtools.validate_password(password, user['password']):
                returned = user['username']
                get_log().info("authenticate: validated  user: %r" % returned)
            else:
                get_log().info("authenticate: failed")
        else:
            get_log().info("authenticate: no mathcing user")

        return returned

    def add_metadata(self, environ, identity):
        """
        Add the firstname, lastname, name to the identity from
        the user details we recovered from the CSV data.

        See: (IMetadataProvider)
            http://docs.repoze.org/who/narr.html#writing-a-metadata-provider-plugin
        
        """
        userid = identity.get('repoze.who.userid')
        info = self.userDetails.get(userid)
        if info is not None:
            identity.update(info)


def get_auth_from_config(settings, prefix="pp.auth.plain."):
    """
    Return a `PlainAuthenticatorMetadataProvider` from a settings dict
    """
    password_file = settings['%spassword_file' % prefix]
    if not os.path.isfile(password_file):
        raise ValueError("Unable to find password file '%s'!" % password_file)

    # Recover the User details and load it for the CSV repoze plugin to handle:
    with open(os.path.abspath(password_file), 'r') as fp:
       return (PlainAuthenticatorMetadataProvider(fp.read()))


def get_groups_from_config(settings, prefix="pp.auth.plain."):
    """
    Return a groups `INIGroupAdapter` from a settings dict
    """
    groups_file = settings['%sgroups_file' % prefix]
    if not os.path.isfile(groups_file):
        raise ValueError("Unable to find groups file '%s'!" % groups_file)

    return INIGroupAdapter(groups_file)


def get_permissions_from_config(settings, prefix="pp.auth.plain."):
    """
    Return a permissions `INIGroupAdapter` from a settings dict
    """
    permissions_file = settings['%spermissions_file' % prefix]
    if not os.path.isfile(permissions_file):
        raise ValueError("Unable to find permissions file '%s'!" % permissions_file)

    return INIPermissionsAdapter(permissions_file)

